import { GraphGenerationWorkerPool } from "./graph_generation_worker_pool.js";
import { GridSearchWorkerPool } from "./grid_search_worker_pool.js";

/**
 * Start the peptonizer. This function takes in a PSM-file that has been read in earlier (so no file paths here). The
 * PSMS including their intensities are then used as input to the Peptonizer-pipeline. This pipeline will finally
 * return a Map in which NCBI taxon IDs are mapped onto their propabilities (as computed by the Peptonizer).
 *
 * @param psmContent Content of a PSM-file generated by upstream tools (such as MS2Rescore).
 * @param alphas An array of possible values for the alpha parameter. This parameter indicates the probability that an
 * observed taxon also indicates the presence of a peptide.
 * @param betas An array of possible values for the beta parameter. This parameter indicates the probability of
 * detecting a peptide at random.
 * @param priors An array of possible values for the gamma (or prior) parameter. Gamma indicates the prior probability
 * of a taxon being present.
 * @return Mapping between NCBI taxon IDs (integer, > 0) and probabilities (float in [0, 1]).
 */
export async function peptonize(
    psmContent,
    alphas,
    betas,
    priors
) {
    // First, we've got to generate the PepGM factor graph itself.
    const generatedGraph = await GraphGenerationWorkerPool.generatePepGmGraph(psmContent);

    // Check if generating the graph worked properly
    if (generatedGraph.error) {
        return {
            error: generatedGraph.error
        }
    }

    // If we reach this point, the graphs have been generated properly, and we can start the belief propagation
    // algorithm for all possible parameter combinations.
    return GridSearchWorkerPool.performGridSearch(
        generatedGraph.graph,
        alphas,
        betas,
        priors
    );
}

