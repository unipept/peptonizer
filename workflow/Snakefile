from os import path

configfile: "../config/config.yaml"

# Directories that are being used over all rules
data_dir = config['data_dir']
log_dir = config['log_dir']

rule All:
    # By specifying the final output files as input to this step, we tell snakemake to run all required steps for these
    # files beforehand.
    input:
        expand(path.join(data_dir, 'prior{prior}', 'pepgm_results_a{alpha}_b{beta}_p{prior}.png'), alpha = config['alpha'], beta = config['beta'], prior = config['prior'])

rule GetTaxonomyFromUnipept:
    input:
        config['input_file']
    output:
        path.join(data_dir, 'unipept_response.json'),
        path.join(data_dir, 'unipept_peptide_counts.json')
    log:
        path.join(log_dir, 'get_taxonomy_from_unipept.log')
    params:
        taxon_query = config['taxon_query'],
        fdr = config['fdr']
    conda: "env.yml"
    shell: "python3 scripts/unipept_get_taxonomy_from_pout.py --pout-file {input[0]} --unipept-response-file {output[0]} --unipept-peptide-counts {output[1]} --log-file {log[0]} --taxonomy-query {params.taxon_query} --fdr {params.fdr}"

rule WeightTaxa:
    input:
        path.join(data_dir, 'unipept_response.json'),
        path.join(data_dir, 'unipept_peptide_counts.json')
    output:
        path.join(data_dir, 'weights_data_frame.csv'),
        path.join(data_dir, 'taxa_weights.csv')
    params:
        number_of_taxa = config['number_of_taxa'],
        taxon_rank = config['taxon_rank']
    conda: "env.yml"
    shell: "python3 scripts/weight_taxa.py --unipept-response-file {input[0]} --unipept-peptide-counts {input[1]} --out {output[0]} --taxa-weight-file {output[1]} --number-of-taxa {params.number_of_taxa} --taxon-rank {params.taxon_rank}"

rule CreatePepGMGraph:
    input:
        path.join(data_dir, 'weights_data_frame.csv')
    output:
        path.join(data_dir, 'pepgm_graph.graphml')
    conda: "env.yml"
    shell: "python3 scripts/create_pepgm_graph.py --graph-data-frame {input[0]} --out {output[0]}"

rule RunPepGM:
    input:
        path.join(data_dir, 'pepgm_graph.graphml')
    output:
        path.join(data_dir, 'prior{prior}', 'pepgm_results_a{alpha}_b{beta}_p{prior}.csv')
    params:
        regularized = config['regularized']
    conda: "env.yml"
    shell: "python3 scripts/pepgm.py --graphml-path {input[0]} --out {output[0]} --prior {wildcards.prior} --alpha {wildcards.alpha} --beta {wildcards.beta} --regularized {params.regularized}"

rule GenerateBarPlot:
    input:
        path.join(data_dir, 'prior{prior}', 'pepgm_results_a{alpha}_b{beta}_p{prior}.csv')
    output:
        path.join(data_dir, 'prior{prior}', 'pepgm_results_a{alpha}_b{beta}_p{prior}.png')
    params:
        taxa_in_plot = config['taxa_in_plot']
    conda: "env.yml"
    shell: "python3 scripts/bar_plot_results.py --results-file {input[0]} --out {output[0]} --number-of-results {params.taxa_in_plot}"