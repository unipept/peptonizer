from os import path

configfile: "../config/config.yaml"

# Directories that are being used over all rules
data_dir = config['data_dir']
log_dir = config['log_dir']
benchmark_dir = config['benchmark_dir']

def select_command(use_profiler, profile_file):
    if use_profiler:
        return f"python3 -m cProfile -o {profile_file}"
    else:
        return "python3"

rule All:
    input:
        expand(path.join(data_dir, 'prior{prior}', 'pepgm_results_a{alpha}_b{beta}_p{prior}.png'), alpha=config['alpha'], beta=config['beta'], prior=config['prior'])

rule GetTaxonomyFromUnipept:
    input:
        config['input_file']
    output:
        path.join(data_dir, 'unipept_response.json'),
        path.join(data_dir, 'unipept_peptide_counts.json')
    log:
        path.join(log_dir, 'get_taxonomy_from_unipept.log')
    params:
        taxon_query=config['taxon_query'],
        fdr=config['fdr'],
        run_command=select_command(config['profile'], path.join(benchmark_dir, "get_taxonomy_from_unipept.prof"))
    benchmark:
        path.join(benchmark_dir, "get_taxonomy_from_unipept.tsv")
    conda: "env.yml"
    shell: "{params.run_command} scripts/unipept_get_taxonomy_from_pout.py --pout-file {input[0]} --unipept-response-file {output[0]} --unipept-peptide-counts {output[1]} --log-file {log[0]} --taxonomy-query {params.taxon_query} --fdr {params.fdr}"

rule WeightTaxa:
    input:
        path.join(data_dir, 'unipept_response.json'),
        path.join(data_dir, 'unipept_peptide_counts.json')
    output:
        path.join(data_dir, 'weights_data_frame.csv'),
        path.join(data_dir, 'taxa_weights.csv')
    params:
        number_of_taxa=config['number_of_taxa'],
        taxon_rank=config['taxon_rank'],
        run_command=select_command(config['profile'], path.join(benchmark_dir, "weight_taxa.prof"))
    benchmark:
        path.join(benchmark_dir, "weight_taxa.tsv")
    conda: "env.yml"
    shell:
        "{params.run_command} scripts/weight_taxa.py --unipept-response-file {input[0]} --unipept-peptide-counts {input[1]} --out {output[0]} --taxa-weight-file {output[1]} --number-of-taxa {params.number_of_taxa} --taxon-rank {params.taxon_rank}"

rule CreatePepGMGraph:
    input:
        path.join(data_dir, 'weights_data_frame.csv')
    output:
        path.join(data_dir, 'pepgm_graph.graphml')
    params:
        run_command=select_command(config['profile'], path.join(benchmark_dir, "create_pepgm_graph.prof"))
    benchmark:
        path.join(benchmark_dir, "create_pepgm_graph.tsv")
    conda: "env.yml"
    shell:
        "{params.run_command} scripts/create_pepgm_graph.py --graph-data-frame {input[0]} --out {output[0]}"

rule RunPepGM:
    input:
        path.join(data_dir, 'pepgm_graph.graphml')
    output:
        path.join(data_dir, 'prior{prior}', 'pepgm_results_a{alpha}_b{beta}_p{prior}.csv')
    params:
        regularized=config['regularized'],
        run_command=select_command(config['profile'], path.join(benchmark_dir, 'prior{prior}', "run_pepgm_graph_a{alpha}_b{beta}_p{prior}.prof"))
    benchmark:
        path.join(benchmark_dir, 'prior{prior}', "run_pepgm_graph_a{alpha}_b{beta}_p{prior}.tsv")
    conda: "env.yml"
    shell:
        "{params.run_command} scripts/pepgm.py --graphml-path {input[0]} --out {output[0]} --prior {wildcards.prior} --alpha {wildcards.alpha} --beta {wildcards.beta} --regularized {params.regularized}"

rule GenerateBarPlot:
    input:
        path.join(data_dir, 'prior{prior}', 'pepgm_results_a{alpha}_b{beta}_p{prior}.csv')
    output:
        path.join(data_dir, 'prior{prior}', 'pepgm_results_a{alpha}_b{beta}_p{prior}.png')
    params:
        taxa_in_plot=config['taxa_in_plot'],
        run_command=select_command(config['profile'], path.join(benchmark_dir, 'prior{prior}', "generate_bar_plot_a{alpha}_b{beta}_p{prior}.prof"))
    conda: "env.yml"
    shell:
        "{params.run_command} scripts/bar_plot_results.py --results-file {input[0]} --out {output[0]} --number-of-results {params.taxa_in_plot}"
